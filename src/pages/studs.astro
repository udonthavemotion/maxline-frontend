---
import Layout from "@/layouts/Layout.astro";
import Container from "@/components/container.astro";
import Sectionhead from "@/components/sectionhead.astro";
// @ts-ignore
import { Icon } from "astro-icon/components";
import { getStuds, formatPrice, formatDate, getImageUrl, isVideo, isImage, formatRichText, type Stud } from "@/lib/strapi";

let studs: Stud[] = [];
let error: string | null = null;

try {
  const response = await getStuds({
    populate: '*', // This now works correctly - all fields including page_gallery are populated
    sort: 'createdAt:desc',
    pageSize: 50
  });
  studs = response.data;
  console.log('Studs fetch successful:', studs.length, 'studs found');
} catch (err) {
  console.error('Media fetch error:', err);
  error = 'Failed to load studs. Please try again later.';
  
  // Updated fallback data to match new type structure
  studs = [
    {
      id: 1,
      documentId: "fallback-1",
      name: "Joker",
      age: "4 years",
      availability: "Available",
      fee: 4500,
      description: [
        {
          type: "paragraph",
          children: [
            { text: "Key stud in our lineup. Movie villain themed bloodline with proven genetics." }
          ]
        }
      ],
      bloodlines: "Maxline Foundation",
      specialties: "Champion Bloodlines, Proven Producer",
      images: [],
      background_video: undefined,
      createdAt: "2023-01-01T00:00:00.000Z",
      updatedAt: "2023-01-01T00:00:00.000Z",
      publishedAt: "2023-01-01T00:00:00.000Z"
    },
    {
      id: 2,
      documentId: "fallback-2",
      name: "Hannibal",
      age: "5 years",
      availability: "Available",
      fee: 5000,
      description: [
        {
          type: "paragraph",
          children: [
            { text: "Foundational male for our breeding program. Strong producer with excellent structure." }
          ]
        }
      ],
      bloodlines: "Maxline Foundation",
      specialties: "Foundational Genetics, Structure", 
      images: [],
      background_video: undefined,
      createdAt: "2023-01-01T00:00:00.000Z",
      updatedAt: "2023-01-01T00:00:00.000Z",
      publishedAt: "2023-01-01T00:00:00.000Z"
    }
  ];
}
---

<Layout title="Champion Studs">
  <Container>
    <Sectionhead>
      <Fragment slot="title">Champion Studs</Fragment>
      <Fragment slot="desc">
        Browse our elite English Bulldog studs available for breeding - Where Legends Are Made
      </Fragment>
    </Sectionhead>
    
    <main class="mt-16">
      <!-- Error Message -->
      {error && (
        <div class="mb-8 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <p class="text-yellow-800">
            <strong>Note:</strong> {error} Showing sample data for demonstration.
          </p>
        </div>
      )}

      <!-- Filter Controls -->
      <div class="mb-8 flex flex-col sm:flex-row gap-4 justify-center">
        <button 
          id="filter-all"
          class="px-4 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600 transition-colors duration-200 font-medium"
          aria-label="Show all studs"
        >
          All Studs
        </button>
        <button 
          id="filter-available"
          class="px-4 py-2 rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors duration-200 font-medium"
          aria-label="Show available studs only"
        >
          Available Only
        </button>
        <button 
          id="filter-busy"
          class="px-4 py-2 rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors duration-200 font-medium"
          aria-label="Show busy studs only"
        >
          Busy
        </button>
      </div>

      <!-- Studs Grid -->
      <div id="studs-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-7xl mx-auto">
        {studs.map((stud) => {
          // Extract thumbnail from images array with corrected structure
          const thumbnail = stud.images?.[0];
          const studName = stud.name || 'Unnamed Stud';
          const studFee = stud.fee || 0;
          const studAge = stud.age || 'N/A';
          const studAvailability = stud.availability || 'Unknown';
          const studDescription = stud.description || '';
          const studBloodlines = stud.bloodlines || '';
          const studSpecialties = stud.specialties || '';
          
          return (
            <a 
              href={`/studs/${stud.documentId}`}
              class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden border border-gray-100 stud-card cursor-pointer block"
              data-status={studAvailability}
              data-stud-id={stud.documentId}
            >
              <div class="relative photo-hover">
                {thumbnail ? (
                  isVideo(thumbnail) ? (
                    <div class="relative w-full h-64 overflow-hidden">
                      <video 
                        src={getImageUrl(thumbnail)}
                        class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        autoplay
                        muted
                        loop
                        playsinline
                        preload="auto"
                      >
                        Your browser does not support the video tag.
                      </video>
                      <!-- Video indicator -->
                      <div class="absolute top-2 right-2 bg-black/50 backdrop-blur-sm text-white px-2 py-1 rounded text-xs font-medium">
                        VIDEO
                      </div>
                      <!-- Subtle play indicator overlay -->
                      <div class="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300 bg-black/20">
                        <div class="w-12 h-12 bg-white/80 rounded-full flex items-center justify-center backdrop-blur-sm">
                          <svg class="w-6 h-6 text-gray-800 ml-1" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M8 5v14l11-7z"/>
                          </svg>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <img 
                      src={getImageUrl(thumbnail, 'medium')}
                      alt={thumbnail.alternativeText || `${studName} stud`}
                      loading="lazy"
                      class="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
                    />
                  )
                ) : (
                  <img 
                    src="https://placehold.co/400x300?text=No+Image"
                    alt={`${studName} stud`}
                    loading="lazy"
                    class="w-full h-64 object-cover transition-transform duration-300 hover:scale-105"
                  />
                )}
                <div class="overlay-text">
                  <h3 class="text-xl font-bold">{studName}</h3>
                  <p class="text-lg">{formatPrice(studFee)}</p>
                </div>
                <div class="absolute top-3 right-3">
                  <span class={`text-white text-xs font-bold px-3 py-1 rounded-full ${
                    studAvailability === 'Available' 
                      ? 'bg-green-500' 
                      : studAvailability === 'Busy'
                      ? 'bg-yellow-500'
                      : 'bg-red-500'
                  }`}>
                    {studAvailability}
                  </span>
                </div>
                <div class="absolute top-3 left-3">
                  <span class="bg-blue-600 text-white text-xs font-bold px-3 py-1 rounded-full flex items-center gap-1">
                    <Icon class="w-3 h-3" name="bx:bxs-crown" />
                    Stud
                  </span>
                </div>
              </div>
              <div class="p-6">
                <div class="flex items-center justify-between mb-3">
                  <h3 class="text-xl font-bold text-gray-900">{studName}</h3>
                  <div class="flex items-center gap-2 text-gray-600">
                    <Icon class="w-4 h-4 text-blue-600" name="bx:bxs-calendar" />
                    <span class="text-sm">{studAge}</span>
                  </div>
                </div>
                <p class="text-gray-600 text-sm mb-3">
                  {typeof studDescription === 'string' 
                    ? studDescription 
                    : formatRichText(studDescription)
                  }
                </p>
                {studBloodlines && studBloodlines.trim() && (
                  <div class="mb-3">
                    <h4 class="text-xs font-semibold text-gray-700 mb-1">BLOODLINES:</h4>
                    <div class="flex flex-wrap gap-1">
                      {studBloodlines.split(',').map((bloodline) => (
                        <span class="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full">
                          {bloodline.trim()}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                {studSpecialties && studSpecialties.trim() && (
                  <div class="mb-4">
                    <h4 class="text-xs font-semibold text-gray-700 mb-1">SPECIALTIES:</h4>
                    <div class="flex flex-wrap gap-1">
                      {studSpecialties.split(',').map((specialty) => (
                        <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                          {specialty.trim()}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
                <div class="flex items-center justify-between">
                  <div>
                    <span class="text-xs text-gray-500">Stud Fee:</span>
                    <span class="text-blue-600 font-bold text-lg block">{formatPrice(studFee)}</span>
                  </div>
                  <span 
                    class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium text-sm inline-flex items-center gap-2"
                    aria-label={`Contact for breeding with ${studName}`}
                  >
                    <Icon class="w-4 h-4" name="bx:bxs-phone" />
                    View Details
                  </span>
                </div>
              </div>
            </a>
          );
        })}
      </div>
      
      <!-- Additional Information -->
      <div class="mt-16 bg-gray-50 rounded-2xl p-8 max-w-4xl mx-auto">
        <div class="text-center mb-8">
          <h3 class="text-2xl font-bold text-gray-900 mb-4">Breeding Information</h3>
          <p class="text-gray-600">
            All our studs are part of our strategic breeding program focused on rare genetics, 
            exotic colors, and champion bloodlines. Based in Wellington, Florida with UK connections.
          </p>
        </div>
        
        <div class="grid md:grid-cols-3 gap-6">
          <div class="text-center">
            <div class="bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3">
              <Icon class="w-6 h-6" name="bx:dna" />
            </div>
            <h4 class="font-semibold text-gray-900 mb-2">Exotic Genetics</h4>
            <p class="text-sm text-gray-600">Rare color combinations and QuadZilla carriers</p>
          </div>
          
          <div class="text-center">
            <div class="bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3">
              <Icon class="w-6 h-6" name="bx:world" />
            </div>
            <h4 class="font-semibold text-gray-900 mb-2">International Bloodlines</h4>
            <p class="text-sm text-gray-600">Strategic imports between US and UK operations</p>
          </div>
          
          <div class="text-center">
            <div class="bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3">
              <Icon class="w-6 h-6" name="bx:bxs-crown" />
            </div>
            <h4 class="font-semibold text-gray-900 mb-2">Where Legends Are Made</h4>
            <p class="text-sm text-gray-600">Passion-driven breeding for generational impact</p>
          </div>
        </div>
      </div>
    </main>
  </Container>
</Layout>

<script>
  // Client-side filtering functionality
  function initializeFilters() {
    const filterButtons = document.querySelectorAll('[id^="filter-"]');
    const studCards = document.querySelectorAll('.stud-card');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Update button states
        filterButtons.forEach(btn => {
          btn.classList.remove('bg-blue-500', 'text-white');
          btn.classList.add('bg-gray-200', 'text-gray-700');
        });
        button.classList.add('bg-blue-500', 'text-white');
        button.classList.remove('bg-gray-200', 'text-gray-700');
        
        // Filter studs
        const filter = button.id.replace('filter-', '');
        
        studCards.forEach(card => {
          const status = card.getAttribute('data-status');
          
          if (filter === 'all') {
            (card as HTMLElement).style.display = 'block';
          } else if (filter === 'available' && status === 'Available') {
            (card as HTMLElement).style.display = 'block';
          } else if (filter === 'busy' && status === 'Busy') {
            (card as HTMLElement).style.display = 'block';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });
        
        // Reinitialize video functionality after filtering
        initializeVideoFunctionality();
      });
    });
  }
  
  // Modern video functionality
  function initializeVideoFunctionality() {
    const videos = document.querySelectorAll('video');
    
    // Intersection Observer for performance - only play videos when visible
    const videoObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const video = entry.target as HTMLVideoElement;
        if (entry.isIntersecting) {
          video.play().catch(console.error);
        } else {
          video.pause();
        }
      });
    }, {
      threshold: 0.5, // Play when 50% of video is visible
    });
    
    videos.forEach((video) => {
      // Observe video for intersection
      videoObserver.observe(video);
      
      // Click to unmute/mute functionality
      video.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (video.muted) {
          video.muted = false;
          // Show unmute indicator
          showVideoIndicator(video, 'UNMUTED', 'bg-green-500');
        } else {
          video.muted = true;
          // Show mute indicator
          showVideoIndicator(video, 'MUTED', 'bg-red-500');
        }
      });
      
      // Pause on hover for better UX
      video.addEventListener('mouseenter', () => {
        video.playbackRate = 0.8; // Slow down slightly
      });
      
      video.addEventListener('mouseleave', () => {
        video.playbackRate = 1.0; // Normal speed
      });
    });
  }
  
  // Show temporary video indicator
  function showVideoIndicator(video: HTMLVideoElement, text: string, bgClass: string) {
    const indicator = document.createElement('div');
    indicator.className = `absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${bgClass} text-white px-3 py-1 rounded text-sm font-medium z-10 pointer-events-none`;
    indicator.textContent = text;
    
    const container = video.parentElement;
    if (container) {
      container.appendChild(indicator);
      
      // Remove after 2 seconds
      setTimeout(() => {
        indicator.remove();
      }, 2000);
    }
  }
  
  // Initialize everything when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeFilters();
    initializeVideoFunctionality();
  });
</script> 